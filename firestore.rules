rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // === Admin Check ===
    // Nutzt Custom Token Claim. Stelle sicher, dass dieser für Admins gesetzt wird!
    function isAdmin() {
      return request.auth != null && request.auth.token.isAdmin == true;
    }

    // === Users Collection ===
    match /users/{userId} {
      // Jeder eingeloggte Benutzer kann seinen eigenen Eintrag lesen/schreiben.
      // Admins können jeden Eintrag lesen (für zukünftige Admin-Funktionen).
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow write: if request.auth != null && request.auth.uid == userId;
       // Das Setzen des isAdmin Feldes sollte nur serverseitig/durch Admins erfolgen!
    }

    // === Buchungen ===
    match /buchungen/{buchungId} {
      // Erstellen: Jeder (auch anonym), mit Datenvalidierung.
      // Angepasst an die Struktur von bookingData in booking.js
      allow create: if request.resource.data.status == 'angefragt' &&
                       request.resource.data.date is timestamp &&
                       // request.resource.data.time is string && // Entfernt, da Zeit in 'date' enthalten ist
                       request.resource.data.name is string && // Direkt auf name zugreifen
                       request.resource.data.name.size() > 0 &&
                       request.resource.data.email is string && // Direkt auf email zugreifen
                       request.resource.data.email.matches('.+@.+\\..+') && // Einfache E-Mail-Prüfung
                       request.resource.data.duration is number; // Dauer hinzugefügt
                       // Optional: Füge hier Prüfungen für phone, notes etc. hinzu

      // Lesen: Jeder darf lesen (für Verfügbarkeitsprüfung durch Website).
      // Angepasst von alten Regeln.
      allow read: if true;

      // Update: Nur Admins dürfen den Status ändern.
      // Angepasst von neuen Regeln, nutzt die neue isAdmin() Funktion.
      allow update: if isAdmin() &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']) &&
                       request.resource.data.status is string &&
                       (request.resource.data.status == 'bestätigt' || request.resource.data.status == 'abgelehnt');

      // Löschen: Nur Admins.
      allow delete: if isAdmin();
    }

    // === Kontaktanfragen ===
    match /kontaktanfragen/{anfragenId} {
      // Erstellen: Jeder (auch nicht angemeldet), mit Datenvalidierung.
      allow create: if request.resource.data.name is string &&
                       request.resource.data.name.size() > 0 &&
                       request.resource.data.email is string &&
                       request.resource.data.email.matches('.+@.+\\..+');

      // Lesen/Update/Delete: Nur durch Admin
      // Nutzt die neue isAdmin() Funktion.
      allow read, update, delete: if isAdmin();
    }

    // === Verfügbare Zeitslots ===
    match /verfuegbare_slots/{slotId} {
      // Lesen: Jeder (z.B. für Website-Kalender).
      allow read: if true;

      // Schreiben (Erstellen, Ändern, Löschen): Nur durch Admin, mit Datenvalidierung.
      // Angepasst von neuen Regeln, nutzt die neue isAdmin() Funktion und Validierung.
      allow write: if isAdmin() &&
                      request.resource.data.datum is timestamp &&
                      request.resource.data.startTime is string &&
                      request.resource.data.startTime.matches('^[0-2][0-9]:[0-5][0-9]$') &&
                      request.resource.data.endTime is string &&
                      request.resource.data.endTime.matches('^[0-2][0-9]:[0-5][0-9]$') &&
                      request.resource.data.isAvailable is bool &&
                      // request.resource.data.intervall is number && // 'intervall' ggf. nicht nötig oder anders validieren
                      request.resource.data.startTime < request.resource.data.endTime; // Grundlegende Validierung
    }

    // === Admin-Einstellungen ===
    match /admin_settings/{settingId} {
      // Nur Admin hat vollen Zugriff
      // Nutzt die neue isAdmin() Funktion.
      allow read, write: if isAdmin();
    }
  }
} 